/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void graph(TreeNode* root, vector<int> adj[]) {
        if(!root) return;

        if(root -> left) {
            adj[root -> val].push_back(root -> left -> val);
            adj[root -> left -> val].push_back(root -> val);
        }
        if(root -> right) {
            adj[root -> val].push_back(root -> right -> val);
            adj[root -> right -> val].push_back(root -> val);
        }
        graph(root -> left, adj);
        graph(root -> right, adj);
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        vector<int> adj[100005];
        graph(root, adj);

        queue<int> q;
        vector<bool> vis(100005, 0);

        q.push(start);
        vis[start] = true;

        int counter = 0;

        while(!q.empty()) {
            auto n = q.size();
            if(n) counter++;

            for(int i = 0; i < n; i++) {
                auto node = q.front();
                q.pop();
                for(auto it : adj[node]) {
                    if(!vis[it]) {
                        vis[it] = true;
                        q.push(it);
                    }
                }
            }
        }
        return counter-1;
    }
};
