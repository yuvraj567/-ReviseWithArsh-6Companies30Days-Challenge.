class Solution {
public:
    int numFriendRequests(vector<int>& ages) {
        int requestCount = 0;
        sort(ages.begin(), ages.end());
        int n = ages.size();

        for (int i = 0; i < n; ++i) {
            int leftmostValidIndex = -1;
            int start = 0, end = n - 1;

            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (ages[mid] > 0.5 * ages[i] + 7) {
                    leftmostValidIndex = mid;
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
            if (leftmostValidIndex < 0) {
                continue;
            }

            int rightmostValidIndex = -1;
            start = 0;
            end = n - 1;

            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (ages[mid] <= ages[i]) {
                    rightmostValidIndex = mid;
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }

            int count = rightmostValidIndex - leftmostValidIndex;
            requestCount += (count > 0) ? count : 0;
        }

        return requestCount;
    }
};
