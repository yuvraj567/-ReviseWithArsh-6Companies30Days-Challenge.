/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    struct Result {
        bool isBST;
        int minValue, maxValue, subtreeSum;
        Result() : isBST(true), minValue(INT_MAX), maxValue(INT_MIN), subtreeSum(0) {}
    };

    int maxSumBST(TreeNode* root) {
        int maxSum = 0;
        calcSum(root, maxSum);
        return maxSum;
    }

private:
    Result calcSum(TreeNode* root, int &maxSum) {
        if (!root) {
            return Result();
        }

        Result result;
        Result leftResult = calcSum(root->left, maxSum);
        Result rightResult = calcSum(root->right, maxSum);

        if (leftResult.isBST && rightResult.isBST &&
            root->val > leftResult.maxValue && root->val < rightResult.minValue) {
            result.isBST = true;
            result.minValue = min(root->val, leftResult.minValue);
            result.maxValue = max(root->val, rightResult.maxValue);
            result.subtreeSum = root->val + leftResult.subtreeSum + rightResult.subtreeSum;
        } 
        else {
            result.isBST = false;
            result.subtreeSum = max(leftResult.subtreeSum, rightResult.subtreeSum);
        }

        maxSum = max(maxSum, result.subtreeSum);
        return result;
    }
};
