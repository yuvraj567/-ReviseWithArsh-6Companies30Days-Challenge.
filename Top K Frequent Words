class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        auto compare = [](const pair<string, int>& a, const pair<string, int>& b) {
            if (a.second != b.second) {
                return a.second < b.second;
            }
            return a.first > b.first;
        };

        priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(compare)> pq(compare);
        unordered_map<string, int> frequencyMap;

        for (const string& word : words) {
            frequencyMap[word]++;
        }

        for (const auto& it : frequencyMap) {
            pq.push({it.first, it.second});
        }

        vector<string> res;

        while (!pq.empty() && k--) {
            auto it = pq.top();
            pq.pop();
            res.push_back(it.first);
        }

        return res;
    }
};
